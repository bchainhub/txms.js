#!/usr/bin/env node

import txms from '../dist/index.js';

if (process.stdin.isTTY) {
	const typ = process.argv[2];
	const value = process.argv[3];
	const loc = process.argv[4];

	run(typ, value, loc);
} else {
	let content = '';
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', (buf) => {
		content += buf.toString();
	});
	process.stdin.on('end', () => {
		content = content.trim();

		let value = content;
		let typ = process.argv[2];
		let loc = process.argv[3];

		if (!content) {
			value = process.argv[2];
			typ = process.argv[3];
			loc = process.argv[4];
		}

		run(typ, value, loc);
	});
}

function run(typ, value, loc) {
	if (!value) {
		process.stderr.write('value is required\n');
		process.exit(1);
	}

	try {
		if (typ === 'encode' || typ === 'e') {
			const encoded = txms.encode(value);
			process.stdout.write(`${encoded}\n`);
		} else if (typ === 'decode' || typ === 'd') {
			const decoded = txms.decode(value);
			process.stdout.write(`${decoded}\n`);
		} else if (typ === 'getendpoint' || typ === 'g') {
			const endpoint = txms.getEndpoint(value, loc);
			process.stdout.write(`${JSON.stringify(endpoint, null, 2)}\n`);
		} else if (typ === 'sms') {
			const sms = txms.sms(true, value);
			process.stdout.write(`${sms}\n`);
		} else if (typ === 'mms') {
			const mms = txms.mms(true, value);
			process.stdout.write(`${mms}\n`);
		} else {
			throw new Error('Invalid type specified. Use "encode", "decode", "getendpoint", "sms", or "mms".');
		}
		process.exit(0);
	} catch (err) {
		process.stderr.write(`${err.message}\n`);
		process.exit(1);
	}
}
